import boto3
import os
import logging
import json

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize the Elastic Load Balancing v2 and Lambda clients
elbv2 = boto3.client('elbv2')
lambda_client = boto3.client('lambda')

# Environment variables
TARGET_GROUP_ARN = os.getenv('TARGET_GROUP_ARN')
INSTANCE_IDS = os.getenv('INSTANCE_IDS', '').split(',')
PROCESS_ALARM_FUNCTION_NAME = os.getenv('PROCESS_ALARM_FUNCTION_NAME')  # Lambda function for alarm handling

def lambda_handler(event, context):
    """
    Deregisters instances from a specified target group in NLB.
    """
    try:
        # Validate input
        if not TARGET_GROUP_ARN or not INSTANCE_IDS:
            raise ValueError("Environment variables TARGET_GROUP_ARN and INSTANCE_IDS are required.")

        logger.info(f"Target Group ARN: {TARGET_GROUP_ARN}")
        logger.info(f"Instance IDs: {INSTANCE_IDS}")

        # Fetch target health descriptions
        response = elbv2.describe_target_health(TargetGroupArn=TARGET_GROUP_ARN)
        target_health_descriptions = response.get('TargetHealthDescriptions', [])

        logger.info(f"Fetched target health descriptions for target group {TARGET_GROUP_ARN}.")

        # Determine instances to deregister
        instances_to_deregister = [
            {'Id': instance_id}
            for instance_id in INSTANCE_IDS
            if any(
                thd['Target']['Id'] == instance_id and thd['TargetHealth']['State'] not in ('draining', 'unused')
                for thd in target_health_descriptions
            )
        ]

        if instances_to_deregister:
            # Deregister instances
            deregister_response = elbv2.deregister_targets(
                TargetGroupArn=TARGET_GROUP_ARN,
                Targets=instances_to_deregister
            )
            logger.info(f"Successfully deregistered instances: {instances_to_deregister}")
            logger.debug(f"Deregistration response: {deregister_response}")

            return {
                "status": "success",
                "message": f"Instances deregistered: {instances_to_deregister}",
                "deregistered_instances": [target['Id'] for target in instances_to_deregister]
            }
        else:
            logger.warning(f"No instances to deregister for target group {TARGET_GROUP_ARN}.")
            return {
                "status": "warning",
                "message": "No instances required deregistration.",
                "deregistered_instances": []
            }

    except Exception as e:
        # Log and handle error
        logger.error(f"An error occurred: {e}", exc_info=True)
        error_message = f"Failed to deregister instances: {str(e)}"

        # Invoke ProcessAlarm Lambda for error handling
        if PROCESS_ALARM_FUNCTION_NAME:
            try:
                process_alarm_payload = {
                    "error": error_message,
                    "target_group_arn": TARGET_GROUP_ARN,
                    "instance_ids": INSTANCE_IDS
                }
                invoke_response = lambda_client.invoke(
                    FunctionName=PROCESS_ALARM_FUNCTION_NAME,
                    InvocationType="Event",  # Fire-and-forget invocation
                    Payload=json.dumps(process_alarm_payload)
                )
                logger.info(f"Invoked ProcessAlarm Lambda: {invoke_response}")
            except Exception as invoke_error:
                logger.error(f"Failed to invoke ProcessAlarm Lambda: {invoke_error}")

        return {
            "status": "error",
            "message": error_message,
            "deregistered_instances": []
        }

################################ state machine #################

{
  "StartAt": "DeregisterInstance",
  "States": {
    "DeregisterInstance": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:your_deregister_instance_function",
      "Next": "CheckDeregisterStatus"
    },
    "CheckDeregisterStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.status",
          "StringEquals": "success",
          "Next": "Wait"
        },
        {
          "Variable": "$.status",
          "StringEquals": "warning",
          "Next": "StopInstance"
        },
        {
          "Variable": "$.status",
          "StringEquals": "error",
          "Next": "ProcessAlarm"
        }
      ],
      "Default": "FailState"
    },
    "Wait": {
      "Type": "Wait",
      "Seconds": 300,
      "Next": "StopInstance"
    },
    "StopInstance": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:your_stop_instance_function",
      "End": true
    },
    "ProcessAlarm": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:your_process_alarm_function",
      "End": true
    },
    "FailState": {
      "Type": "Fail",
      "Error": "DeregisterFailed",
      "Cause": "Unexpected error"
    }
  }
}


######################## processalarm lambda function ################

import boto3
import logging
import os

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize the SNS client
sns = boto3.client('sns')

# Environment variables
SNS_TOPIC_ARN = os.getenv('SNS_TOPIC_ARN')  # The ARN of the SNS topic

def lambda_handler(event, context):
    """
    Sends an SNS notification with error details when an alarm is triggered.
    """
    try:
        logger.info("Received event for processing alarm:")
        logger.info(event)

        # Extract relevant details from the event
        error_message = event.get('message', 'No error message provided.')
        deregistered_instances = event.get('deregistered_instances', [])
        status = event.get('status', 'unknown')

        # Construct the notification message
        notification_message = (
            f"Status: {status}\n"
            f"Error Message: {error_message}\n"
            f"Deregistered Instances: {', '.join(deregistered_instances) if deregistered_instances else 'None'}"
        )

        logger.info(f"Notification message: {notification_message}")

        # Publish to SNS
        if not SNS_TOPIC_ARN:
            raise ValueError("SNS_TOPIC_ARN environment variable is not set.")

        sns_response = sns.publish(
            TopicArn=SNS_TOPIC_ARN,
            Subject="Deregistration Alarm Notification",
            Message=notification_message
        )

        logger.info(f"Notification sent successfully. SNS Response: {sns_response}")

        return {
            "status": "success",
            "message": "Alarm processed and notification sent successfully."
        }

    except Exception as e:
        logger.error(f"An error occurred while processing the alarm: {e}", exc_info=True)
        return {
            "status": "error",
            "message": f"Failed to process alarm: {str(e)}"
        }
