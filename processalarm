import boto3
import os
import logging
import json

# Set up logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Initialize the Elastic Load Balancing v2 and Lambda clients
elbv2 = boto3.client('elbv2')
lambda_client = boto3.client('lambda')

# Environment variables
TARGET_GROUP_ARN = os.getenv('TARGET_GROUP_ARN')
INSTANCE_IDS = os.getenv('INSTANCE_IDS', '').split(',')
PROCESSALARM_FUNCTION_NAME = os.getenv('PROCESSALARM_FUNCTION_NAME')

def invoke_processalarm(status, message, target_group_arn, instance_ids):
    """
    Invokes the processalarm Lambda function with the specified payload.
    """
    try:
        payload = {
            "status": status,
            "error_message": message,
            "target_group_arn": target_group_arn,
            "instance_ids": instance_ids
        }
        logger.info(f"Invoking processalarm Lambda with payload: {json.dumps(payload)}")
        response = lambda_client.invoke(
            FunctionName=PROCESSALARM_FUNCTION_NAME,
            InvocationType='Event',  # Asynchronous invocation
            Payload=json.dumps(payload)
        )
        logger.info(f"ProcessAlarm Lambda invoked successfully. Response: {response}")
    except Exception as e:
        logger.error(f"Failed to invoke ProcessAlarm Lambda: {e}", exc_info=True)

def lambda_handler(event, context):
    """
    Deregisters instances from a specified target group in NLB.
    """
    try:
        # Validate input
        if not TARGET_GROUP_ARN or not INSTANCE_IDS:
            raise ValueError("Environment variables TARGET_GROUP_ARN and INSTANCE_IDS are required.")

        logger.info(f"Target Group ARN: {TARGET_GROUP_ARN}")
        logger.info(f"Instance IDs: {INSTANCE_IDS}")

        # Fetch target health descriptions
        response = elbv2.describe_target_health(TargetGroupArn=TARGET_GROUP_ARN)
        target_health_descriptions = response.get('TargetHealthDescriptions', [])

        logger.info(f"Fetched target health descriptions for target group {TARGET_GROUP_ARN}.")

        # Determine instances to deregister
        instances_to_deregister = [
            {'Id': instance_id}
            for instance_id in INSTANCE_IDS
            if any(
                thd['Target']['Id'] == instance_id and thd['TargetHealth']['State'] not in ('draining', 'unused')
                for thd in target_health_descriptions
            )
        ]

        if instances_to_deregister:
            # Deregister instances
            deregister_response = elbv2.deregister_targets(
                TargetGroupArn=TARGET_GROUP_ARN,
                Targets=instances_to_deregister
            )
            logger.info(f"Successfully deregistered instances: {instances_to_deregister}")
            logger.debug(f"Deregistration response: {deregister_response}")
            return {
                "status": "success",
                "message": f"Instances deregistered: {instances_to_deregister}",
                "deregistered_instances": [target['Id'] for target in instances_to_deregister]
            }
        else:
            warning_message = "No instances required deregistration."
            logger.warning(warning_message)

            # Invoke ProcessAlarm for warning status
            invoke_processalarm(
                status="warning",
                message=warning_message,
                target_group_arn=TARGET_GROUP_ARN,
                instance_ids=[]
            )

            return {
                "status": "warning",
                "message": warning_message,
                "deregistered_instances": []
            }

    except Exception as e:
        error_message = f"Failed to deregister instances: {str(e)}"
        logger.error(error_message, exc_info=True)

        # Invoke ProcessAlarm for error status
        invoke_processalarm(
            status="error",
            message=error_message,
            target_group_arn=TARGET_GROUP_ARN,
            instance_ids=INSTANCE_IDS
        )

        return {
            "status": "error",
            "message": error_message,
            "deregistered_instances": []
        }
